# .travis.yml file for running continuous integration on Travis-CI for ROS.
#
# From:
#   - http://felixduvallet.github.io/ros-travis-integration
#   - https://github.com/felixduvallet/ros-travis-integration
#
# This installs ROS on a clean Travis-CI virtual machine, creates a ROS
# workspace, resolves all listed dependencies, and sets environment variables
# (setup.bash). Then, it compiles the entire ROS workspace (ensuring there are
# no compilation errors), and runs all the tests. If any of the compilation/test
# phases fail, the build is marked as a failure.
#
# We handle two types of package dependencies specified in the package manifest:
#   - system dependencies that can be installed using `rosdep`, including other
#     ROS packages and system libraries. These dependencies must be known to
#     `rosdistro` and get installed using apt-get.
#   - package dependencies that must be checked out from source. These are handled by
#     `wstool`, and should be listed in a file named dependencies.rosinstall.
#
# There are two variables you may want to change:
#   - ROS_DISTRO (default is indigo). Note that packages must be available for
#     ubuntu 14.04 trusty.
#   - ROSINSTALL_FILE (default is dependencies.rosinstall inside the repo
#     root). This should list all necessary repositories in wstool format (see
#     the ros wiki). If the file does not exists then nothing happens.
#
# Original Author: Felix Duvallet <felixd@gmail.com>

# NOTE: The build lifecycle on Travis.ci is something like this:
#    before_install
#    install
#    before_script
#    script
#    after_success or after_failure
#    after_script
#    OPTIONAL before_deploy
#    OPTIONAL deploy
#    OPTIONAL after_deploy

################################################################################

# No emails.
notifications:
  email:
    on_success: never
    on_failure: never

# Use ubuntu trusty (14.04) with sudo privileges.
dist: trusty
sudo: required
language: python
cache:
  apt: true
  directories:
    - ${HOME}/.cache/pip

# Configuration variables. All variables are global now, but this can be used to
# trigger a build matrix for different ROS distributions if desired.
env:
  global:
    - ROS_DISTRO='indigo'
    - ROS_CI_DESKTOP="$(lsb_release -cs)"  # e.g. [precise|trusty|...]
    - CI_SOURCE_PATH="$(pwd)"
    - ROSINSTALL_FILE="${CI_SOURCE_PATH}/dependencies.rosinstall"
    - CATKIN_OPTIONS="${CI_SOURCE_PATH}/catkin.options"
    - ROS_PARALLEL_JOBS='-j8 -l6'
    # Set the python path manually to include /usr/-/python2.7/dist-packages
    # as this is where apt-get installs python packages.
    - PYTHONPATH="${PYTHONPATH}:/usr/lib/python2.7/dist-packages:/usr/local/lib/python2.7/dist-packages"

################################################################################

# Install system dependencies, namely a very barebones ROS setup.
before_install:
  - sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu ${ROS_CI_DESKTOP} main\" > /etc/apt/sources.list.d/ros-latest.list"
  - sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116
  - sudo apt-get update -qq
  - sudo apt-get install -y python-catkin-pkg python-rosdep python-wstool ros-${ROS_DISTRO}-catkin
  - source "/opt/ros/${ROS_DISTRO}/setup.bash"
  # Prepare rosdep to install dependencies.
  - sudo rosdep init
  - rosdep update

# Create a catkin workspace with the package under integration.
install:
  - mkdir -p "${HOME}/catkin_ws/src"
  - cd "${HOME}/catkin_ws/src"
  - catkin_init_workspace
  # Create the devel/setup.bash (run catkin_make with an empty workspace) and
  # source it to set the path variables.
  - cd "${HOME}/catkin_ws"
  - catkin_make
  - source devel/setup.bash
  # Copy the code into the workspace.
  - cp -r "${CI_SOURCE_PATH}" "${HOME}/catkin_ws/src"
  - export CI_SOURCE_PATH="${HOME}/catkin_ws/src/$(basename "${CI_SOURCE_PATH}")"

# Install all dependencies, using wstool first and rosdep second.
# wstool looks for a ROSINSTALL_FILE defined in the environment variables.
before_script:
  # source dependencies: install using wstool.
  - cd "${HOME}/catkin_ws/src"
  - wstool init
  - if [[ -f ${ROSINSTALL_FILE} ]] ; then wstool merge ${ROSINSTALL_FILE} ; fi
  - wstool up
  # package depdencies: install using rosdep.
  - cd "${HOME}/catkin_ws"
  - rosdep install -y --from-paths src --ignore-src --rosdistro ${ROS_DISTRO}
  # Change the pip cache owner to root, so it is used.
  - sudo -E chown -R root:root "${HOME}/.cache/pip/"
  # Use wheel caching for quicker installation of NumPy, SciPy, and dlib.
  - export WHEELHOUSE="${HOME}/.cache/pip/wheelhouse"
  - export PIP_FIND_LINKS="file://${WHEELHOUSE}"
  - export PIP_WHEEL_DIR="${WHEELHOUSE}"
  - sudo -E pip install wheel
  - sudo -E pip wheel dlib
  - sudo -E pip install dlib
  - sudo -E pip wheel numpy
  - sudo -E pip install numpy
  - sudo -E pip wheel scipy
  - sudo -E pip install scipy
  # Install all our scripts.
  - cd "${CI_SOURCE_PATH}/setup_scripts/"
  - printf 'y%.0s' {1..999} | ./install_all.sh

# Compile and test (mark the build as failed if any step fails). If the
# CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# to blacklist certain packages.
#
# NOTE on testing: `catkin_make run_tests` will show the output of the tests
# (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# fails. Running `catkin_test_results` aggregates all the results and returns
# non-zero when a test fails (which notifies Travis the build failed).
script:
  - source /opt/ros/${ROS_DISTRO}/setup.bash
  - cd "${HOME}/catkin_ws"
  - catkin_make $( [ -f ${CATKIN_OPTIONS} ] && cat ${CATKIN_OPTIONS} )
  # Run the tests, ensuring the path is set correctly.
  - source devel/setup.bash
  # catkin_make.
  - cd "${HOME}/catkin_ws"
  - catkin_make
  # Pylint.
  - cd "${CI_SOURCE_PATH}"
  - find . -name '*.py' | xargs pylint --rcfile=.pylintrc
  # Run our tests.
  - cd "${HOME}/catkin_ws/build/"
  - make run_tests
  - cd "${HOME}/catkin_ws"
  - catkin_test_results

before_cache:
  # Change the pip cache owner back.
  - sudo -E chown -R ${USER}:${USER} "${HOME}/.cache/pip/"
  # Delete any pip log files.
  - rm -rf "${HOME}/.cache/pip/log/"
